// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/MasoudHeydari/eps-api/ent/searchquery"
	"github.com/google/uuid"
)

// SearchQuery is the model entity for the SearchQuery schema.
type SearchQuery struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Query holds the value of the "query" field.
	Query string `json:"query,omitempty"`
	// LocCode holds the value of the "loc_code" field.
	LocCode int `json:"loc_code,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// JobID holds the value of the "job_id" field.
	JobID uuid.UUID `json:"job_id,omitempty"`
	// IsFinished holds the value of the "is_finished" field.
	IsFinished bool `json:"is_finished,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SearchQueryQuery when eager-loading is set.
	Edges        SearchQueryEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SearchQueryEdges holds the relations/edges for other nodes in the graph.
type SearchQueryEdges struct {
	// Serps holds the value of the serps edge.
	Serps []*SERP `json:"serps,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SerpsOrErr returns the Serps value or an error if the edge
// was not loaded in eager-loading.
func (e SearchQueryEdges) SerpsOrErr() ([]*SERP, error) {
	if e.loadedTypes[0] {
		return e.Serps, nil
	}
	return nil, &NotLoadedError{edge: "serps"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SearchQuery) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case searchquery.FieldIsFinished:
			values[i] = new(sql.NullBool)
		case searchquery.FieldID, searchquery.FieldLocCode:
			values[i] = new(sql.NullInt64)
		case searchquery.FieldQuery, searchquery.FieldLanguage:
			values[i] = new(sql.NullString)
		case searchquery.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case searchquery.FieldJobID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SearchQuery fields.
func (sq *SearchQuery) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case searchquery.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sq.ID = int(value.Int64)
		case searchquery.FieldQuery:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field query", values[i])
			} else if value.Valid {
				sq.Query = value.String
			}
		case searchquery.FieldLocCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field loc_code", values[i])
			} else if value.Valid {
				sq.LocCode = int(value.Int64)
			}
		case searchquery.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				sq.Language = value.String
			}
		case searchquery.FieldJobID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value != nil {
				sq.JobID = *value
			}
		case searchquery.FieldIsFinished:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_finished", values[i])
			} else if value.Valid {
				sq.IsFinished = value.Bool
			}
		case searchquery.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sq.CreatedAt = value.Time
			}
		default:
			sq.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SearchQuery.
// This includes values selected through modifiers, order, etc.
func (sq *SearchQuery) Value(name string) (ent.Value, error) {
	return sq.selectValues.Get(name)
}

// QuerySerps queries the "serps" edge of the SearchQuery entity.
func (sq *SearchQuery) QuerySerps() *SERPQuery {
	return NewSearchQueryClient(sq.config).QuerySerps(sq)
}

// Update returns a builder for updating this SearchQuery.
// Note that you need to call SearchQuery.Unwrap() before calling this method if this SearchQuery
// was returned from a transaction, and the transaction was committed or rolled back.
func (sq *SearchQuery) Update() *SearchQueryUpdateOne {
	return NewSearchQueryClient(sq.config).UpdateOne(sq)
}

// Unwrap unwraps the SearchQuery entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sq *SearchQuery) Unwrap() *SearchQuery {
	_tx, ok := sq.config.driver.(*txDriver)
	if !ok {
		panic("ent: SearchQuery is not a transactional entity")
	}
	sq.config.driver = _tx.drv
	return sq
}

// String implements the fmt.Stringer.
func (sq *SearchQuery) String() string {
	var builder strings.Builder
	builder.WriteString("SearchQuery(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sq.ID))
	builder.WriteString("query=")
	builder.WriteString(sq.Query)
	builder.WriteString(", ")
	builder.WriteString("loc_code=")
	builder.WriteString(fmt.Sprintf("%v", sq.LocCode))
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(sq.Language)
	builder.WriteString(", ")
	builder.WriteString("job_id=")
	builder.WriteString(fmt.Sprintf("%v", sq.JobID))
	builder.WriteString(", ")
	builder.WriteString("is_finished=")
	builder.WriteString(fmt.Sprintf("%v", sq.IsFinished))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sq.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SearchQueries is a parsable slice of SearchQuery.
type SearchQueries []*SearchQuery
